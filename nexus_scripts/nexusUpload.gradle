apply plugin: 'maven'
apply plugin: 'signing'

// load properties
Properties properties = new Properties()
File localPropertiesFile = file("../nexus_scripts/local.properties")
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.file("../nexus_scripts/project.properties")
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

def NEXUS_USERNAME = properties.getProperty("NEXUS_USERNAME")
def NEXUS_PASSWORD = properties.getProperty("NEXUS_PASSWORD")
def RELEASE_REPOSITORY_URL = properties.getProperty("RELEASE_REPOSITORY_URL")
def SNAPSHOT_REPOSITORY_URL = properties.getProperty("SNAPSHOT_REPOSITORY_URL")
def DEVELOPER_ID = properties.getProperty("DEVELOPER_ID")
def DEVELOPER_NAME = properties.getProperty("DEVELOPER_NAME")
def DEVELOPER_EMAIL = properties.getProperty("DEVELOPER_EMAIL")

def PROJ_LICENCE_NAME = properties.getProperty("PROJ_LICENCE_NAME")
def PROJ_LICENCE_URL = properties.getProperty("PROJ_LICENCE_URL")
def PROJ_LICENCE_DEST = properties.getProperty("PROJ_LICENCE_DEST")

def isReleaseBuild() {
    return !PROJ_VERSION.contains("SNAPSHOT")
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = PROJ_GROUP
                pom.artifactId = PROJ_ARTIFACTID
                pom.version = PROJ_VERSION

                print("RELEASE_REPOSITORY_URL:  " + RELEASE_REPOSITORY_URL)
                println()
                repository(url: RELEASE_REPOSITORY_URL) {
                    authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
                }
                snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                    authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
                }

                pom.project {
                    name PROJ_NAME
                    packaging POM_PACKAGING
                    description PROJ_DESCRIPTION
                    url PROJ_WEBSITEURL

                    scm {
                        url PROJ_WEBSITEURL
                        connection PROJ_GITURL
                        developerConnection DEVELOPER_EMAIL
                    }

                    licenses {
                        license {
                            name PROJ_LICENCE_NAME
                            url PROJ_LICENCE_URL
                            distribution PROJ_LICENCE_DEST
                        }
                    }

                    developers {
                        developer {
                            id DEVELOPER_ID
                            name DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        options.encoding = "utf-8"
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}